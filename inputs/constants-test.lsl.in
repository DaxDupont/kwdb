/*
constants-test.lsl.in - This is a LSL2dfg.py input file for the constantvalues.py output module

(C) Copyright 2013 Sei Lisa.
Sei Lisa is the author's username in the Second Life(R) online virtual world.

This file is part of LSL2 Derived Files Generator.

   LSL2 Derived Files Generator is free software: you can redistribute it
   and/or modify it under the terms of the GNU Lesser General Public License
   as published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   LSL2 Derived Files Generator is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with LSL2 Derived Files Generator. If not, see
   <http://www.gnu.org/licenses/>.

Second Life is a registered trademark of Linden Research, Inc.


This script checks the values of the actual constants against those reported
by the database. In case of mismatch, an error is reported together with the
line number of the line that produced it. The function c() does the actual
check. Parameter is a strided list containing any number of pairs with this
structure:

  database value, actual value

Example:
  c([
  0,FALSE
  ,1,TRUE
  ,"00000000-0000-0000-0000-000000000000",NULL_KEY
  ,<0.0, 0.0, 0.0>,ZERO_VECTOR
  ]);

The variable "line" is initialized to the line where the LSL KEYWORDS hook is,
plus one, following the viewer's editor line numbering convention that the
first line is line 0, rather than the customary one where the first line is 1.
Errors are reported using a line number that follows that same convention.
*/

integer errors;
integer line;
string outp;

c(list elements)
{
    integer i;
    integer nparams = llGetListLength(elements);
    ++line;
    while (i < nparams)
    {
        integer typ = llGetListEntryType(elements, i);
        if (typ != llGetListEntryType(elements, i+1))
        {
            errors = TRUE;
            outp += "\nType mismatch in line " + (string)line + ": type in database is " + (string)llGetListEntryType(elements, i+1) + ", should be " + (string)typ;
        }
        else if (typ == TYPE_FLOAT)
        {
            if (llList2Float(elements, i) != llList2Float(elements, i+1))
            {
                errors = TRUE;
                outp += "\nFloat constant value mismatch in line " + (string)line;
            }
        }
        else if (typ == TYPE_VECTOR)
        {
            if (llList2Vector(elements, i) != llList2Vector(elements, i+1))
            {
                errors = TRUE;
                outp += "\nVector constant value mismatch in line " + (string)line;
            }
        }
        else if (typ == TYPE_ROTATION)
        {
            if (llList2Rot(elements, i) != llList2Rot(elements, i+1))
            {
                errors = TRUE;
                outp += "\nRotation constant value mismatch in line " + (string)line;
            }
        }
        // The rest transform to string losslessly
        else if (llList2String(elements, i) != llList2String(elements, i+1))
        {
                errors = TRUE;
                outp += "\nConstant value mismatch in line " + (string)line;
        }
        i+=2;
        ++line;
    }
    ++line;
}

default
{
    state_entry()
    {
        outp = "\nConstants test run on " + llGetDate() + " in " + llGetEnv("sim_channel") + " " + llGetEnv("sim_version");
        line = 107;
<<< LSL KEYWORDS >>>
        if (errors)
            outp += "\nConstants test finished with errors.";
        else
            outp += "\nConstants test finished successfully.";
        llOwnerSay(outp);
    }
}
